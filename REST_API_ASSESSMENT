1. REST API: Total Goals by a Team

import requests
import json
team = 'Barcelona'
year = 2011
url = 'https://www.hackerrank.com/22A31A42C0/api/football_matches?year=' +str(year)+ '&team1=' +team+ '&page=1'
response = requests.request('GET', url, headers={}, data={})
r = json.loads(response.text.encode('utf8'))
r
{'page': '1',
'per_page': 10,
'total': 6,
'total_pages': 1,
'data': [{'competition': 'UEFA Champions League',
 'year': 2011,
 'round': 'GroupH',
 'team1': 'Barcelona',
 'team2': 'AC Milan',
 'team1goals': '2',
 'team2goals': '2'},
 {'competition': 'UEFA Champions League',
 'year': 2011,
 'round': 'GroupH',
 'team1': 'Barcelona',
 'team2': 'Viktoria Plzen',
 'team1goals': '2',
 'team2goals': '0'},
 {'competition': 'UEFA Champions League',
 'year': 2011,
 'round': 'GroupH',
 'team1': 'Barcelona',
 'team2': 'BATE Borisov',
 'team1goals': '4',
 'team2goals': '0'},
 {'competition': 'UEFA Champions League',
 'year': 2011,
 'round': 'R16',
 'team1': 'Barcelona',
 'team2': 'Bayer Leverkusen',
 'team1goals': '7',
 'team2goals': '1'},
 {'competition': 'UEFA Champions League',
 'year': 2011,
 'round': 'QF',
 'team1': 'Barcelona',
 'team2': 'AC Milan',
 'team1goals': '3',
 'team2goals': '1'},
 {'competition': 'UEFA Champions League',
 'year': 2011,
 'round': 'SF',
 'team1': 'Barcelona',
 'team2': 'Chelsea',
 'team1goals': '2',
 'team2goals': '2'}]}
goals = 0
r_data = r['data']
for record in r_data:
 goals += int(record['team1goals'])
goals
20
url = 'https://www.hackerrank.com/22A31A42C0/api/football_matches?year=' +str(year)+ '&team2=' +team+ '&page=1'
response = requests.request('GET', url, headers={}, data={})
r = json.loads(response.text.encode('utf8'))
r
{'page': '1',
'per_page': 10,
'total': 6,
'total_pages': 1,
'data': [{'competition': 'UEFA Champions League',
 'year': 2011,
 'round': 'GroupH',
 'team1': 'BATE Borisov',
 'team2': 'Barcelona',
 'team1goals': '0',
 'team2goals': '5'},
 {'competition': 'UEFA Champions League',
 'year': 2011,
 'round': 'GroupH',
 'team1': 'Viktoria Plzen',
 'team2': 'Barcelona',
 'team1goals': '0',
 'team2goals': '4'},
 {'competition': 'UEFA Champions League',
 'year': 2011,
 'round': 'GroupH',
 'team1': 'AC Milan',
 'team2': 'Barcelona',
 'team1goals': '2',
 'team2goals': '3'},
 {'competition': 'UEFA Champions League',
 'year': 2011,
 'round': 'R16',
 'team1': 'Bayer Leverkusen',
 'team2': 'Barcelona',
 'team1goals': '1',
 'team2goals': '3'},
 {'competition': 'UEFA Champions League',
 'year': 2011,
 'round': 'QF',
 'team1': 'AC Milan',
 'team2': 'Barcelona',
 'team1goals': '0',
 'team2goals': '0'},
 {'competition': 'UEFA Champions League',
 'year': 2011,
 'round': 'SF',
 'team1': 'Chelsea',
 'team2': 'Barcelona',
 'team1goals': '1',
 'team2goals': '0'}]}
goals = 0
r_data = r['data']
for record in r_data:
 goals += int(record['team2goals'])
goals
15
import requests
import json
team = 'Barcelona'
year = 2011
goals = 0
for tm in ['team1', 'team2']:
 url = 'https://www.hackerrank.com/22A31A42C0/api/football_matches?year=' +str(year)+ '&' +tm+ '=' +team+ '&page=1'
 response = requests.request('GET', url, headers={}, data={})
 total_pages = json.loads(response.text.encode('utf8'))['total_pages']
 for i in range(1, total_pages+1):
 url = 'https://www.hackerrank.com/22A31A42C0/api/football_matches?year=' +str(year)+ '&' +tm+ '=' +team+ '&page=' +str(i)
 response = requests.request('GET', url, headers={}, data={})
 r = json.loads(response.text.encode('utf8'))
 r_data = r['data']
 for record in r_data:
 goals += int(record[tm+'goals'])
 
goals
35



2. REST API: Football Competition Winner's Goals


import requests
import json
competition = 'UEFA Champions League'
year = 2011
url = 'https://jsonmock.hackerrank.com/api/football_competitions?name=' +competition+ '&year=' +str(year)
response = requests.request('GET', url, headers={}, data={})
r = json.loads(response.text.encode('utf8'))
r
{'page': 1,
'per_page': 10,
'total': 1,
'total_pages': 1,
'data': [{'name': 'UEFA Champions League',
 'country': '',
 'year': 2011,
 'winner': 'Chelsea',
 'runnerup': 'Bayern Munich'}]}
winner = 'Chelsea'
url = 'https://jsonmock.hackerrank.com/api/football_matches?competition=' +competition+ '&year=' +str(year)+ '&team1=' +winner+ '&page=1'
response = requests.request('GET', url, headers={}, data={})
r = json.loads(response.text.encode('utf8'))
r
{'page': '1',
'per_page': 10,
'total': 7,
'total_pages': 1,
'data': [{'competition': 'UEFA Champions League',
 'year': 2011,
 'round': 'GroupE',
 'team1': 'Chelsea',
 'team2': 'Bayer Leverkusen',
 'team1goals': '2',
 'team2goals': '0'},
 {'competition': 'UEFA Champions League',
 'year': 2011,
 'round': 'GroupE',
 'team1': 'Chelsea',
 'team2': 'KRC Genk',
 'team1goals': '5',
 'team2goals': '0'},
 {'competition': 'UEFA Champions League',
 'year': 2011,
 'round': 'GroupE',
 'team1': 'Chelsea',
 'team2': 'Valencia CF',
 'team1goals': '3',
 'team2goals': '0'},
 {'competition': 'UEFA Champions League',
 'year': 2011,
 'round': 'R16',
 'team1': 'Chelsea',
 'team2': 'SSC Napoli',
 'team1goals': '3',
 'team2goals': '1'},
 {'competition': 'UEFA Champions League',
 'year': 2011,
 'round': 'QF',
 'team1': 'Chelsea',
 'team2': 'SL Benfica',
 'team1goals': '2',
 'team2goals': '1'},
 {'competition': 'UEFA Champions League',
 'year': 2011,
 'round': 'SF',
 'team1': 'Chelsea',
 'team2': 'Barcelona',
 'team1goals': '1',
 'team2goals': '0'},
 {'competition': 'UEFA Champions League',
 'year': 2011,
 'round': 'final',
 'team1': 'Chelsea',
 'team2': 'Bayern Munich',
 'team1goals': '5',
 'team2goals': '4'}]}
goals = 0
r_data = r['data']
for record in r_data:
 goals += int(record['team1goals'])
goals
21
url = 'https://jsonmock.hackerrank.com/api/football_matches?competition=' +competition+ '&year=' +str(year)+ '&team2=' +winner+ '&page=1'
response = requests.request('GET', url, headers={}, data={})
r = json.loads(response.text.encode('utf8'))
r
{'page': '1',
'per_page': 10,
'total': 6,
'total_pages': 1,
'data': [{'competition': 'UEFA Champions League',
 'year': 2011,
 'round': 'GroupE',
 'team1': 'Valencia CF',
 'team2': 'Chelsea',
 'team1goals': '1',
 'team2goals': '1'},
 {'competition': 'UEFA Champions League',
 'year': 2011,
 'round': 'GroupE',
 'team1': 'KRC Genk',
 'team2': 'Chelsea',
 'team1goals': '1',
 'team2goals': '1'},
 {'competition': 'UEFA Champions League',
 'year': 2011,
 'round': 'GroupE',
 'team1': 'Bayer Leverkusen',
 'team2': 'Chelsea',
 'team1goals': '2',
 'team2goals': '1'},
 {'competition': 'UEFA Champions League',
 'year': 2011,
 'round': 'R16',
 'team1': 'SSC Napoli',
 'team2': 'Chelsea',
 'team1goals': '3',
 'team2goals': '1'},
 {'competition': 'UEFA Champions League',
 'year': 2011,
 'round': 'QF',
 'team1': 'SL Benfica',
 'team2': 'Chelsea',
 'team1goals': '0',
 'team2goals': '1'},
 {'competition': 'UEFA Champions League',
 'year': 2011,
 'round': 'SF',
 'team1': 'Barcelona',
 'team2': 'Chelsea',
 'team1goals': '2',
 'team2goals': '2'}]}
goals = 0
r_data = r['data']
for record in r_data:
 goals += int(record['team2goals'])
goals
7
import requests
import json
def getWinnerTotalGoals(competition, year):
 goals = 0
 url = 'https://jsonmock.hackerrank.com/api/football_competitions?name=' +competition+ '&year=' +str(year)
 response = requests.request('GET', url, headers={}, data={})
 winner = json.loads(response.text.encode('utf8'))['data'][0]['winner']
 
 for team in ['team1', 'team2']:
 url = 'https://jsonmock.hackerrank.com/api/football_matches?competition=' +competition+ '&year=' +str(year)+ '&' +team+ '=' +winner+ '&page=1'
 response = requests.request('GET', url, headers={}, data={})
 total_pages = json.loads(response.text.encode('utf8'))['total_pages']
 for i in range(1, total_pages+1):
 url = 'https://jsonmock.hackerrank.com/api/football_matches?competition=' +competition+ '&year=' +str(year)+ '&' +team+ '=' +winner+ '&page=' +str(i)
 response = requests.request('GET', url, headers={}, data={})
 r = json.loads(response.text.encode('utf8'))
 r_data = r['data']
 for record in r_data:
 goals += int(record[team+'goals'])
 
 return goals
if __name__ == '__main__':
 fptr = open(os.environ['OUTPUT_PATH'], 'w')
 competition = input()
 year = int(input().strip())
 result = getWinnerTotalGoals(competition, year)
 fptr.write(str(result) + '\n')
 fptr.close()
